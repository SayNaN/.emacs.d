* ivy
** M-j : ivy-yank-word将单词输入到minibuffer中
* dap-mode (dap依赖于vscode，设置模板比较复杂，目前放弃，改用realgud)
** Using https://github.com/WebFreak001/code-debug

Configuration

For easier of setting up vscode extension, you only need call dap-gdb-lldb-setup after requiring dap-gdb-lldb.

Or download and extract VSCode extension (make sure that dap-gdb-lldb-path is pointing to the extract location).


(require 'dap-gdb-lldb)
Then do dap-debug or dap-debug-edit-template and selet GBD or LLDB configuration.

for LLDB you need to have lldb-mi in your PATH

If you are on OS X you can add lldb-mi to your path using ln -s /Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi /usr/local/bin/lldb-mi if you have Xcode.
* gen compile_commands.json
ln -s ~/myproject/compile_commands.json ~/myproject-build/
** clangd
If your project builds with CMake, it can generate this file. You should enable it with:
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1
compile_commands.json will be written to your build directory.
You should symlink it (or simply copy it) to the root of your source tree,
if they are different.
** xcode
*** xcpretty
下载: sudo gem install xcpretty
命令: xcodebuild | xcpretty -r json-compilation-database --output ../compile_commands.json
*** xctool
** bear
bear make //生成compile_commands.json
在mac上试了，死活不行，不清楚为什么
** compiledb
compiledb -n make // 可以不走编译过程
** ps
目前看用cmake生成vs2017的工程，是不能使用DCMAKE_EXPORT_COMPILE_COMMANDS参数的，无法生成compile_commands.json文件
* math
- 1^2+2^2+...+n^2 = n(n+1)(2n+1)/6
- (a^2+b^2)/2 = ((a+b)/2)^2 + ((a-b)/2)^2
- (a^2+b^2)(x^2+y^2) = (ax-by)^2+(ay+bx)^2
- (a^2+b^2+c^2+d^2)(x^2+y^2+z^2+w^2) = (ax+by+cz+dw)^2 + (ay-bx+cw-dz)^2 + (az-bw-cx+dy)^2 + (aw+bz-cy-dx)^2
* 并查集
class UnionFind {
public:
    vector<int> parent;
    vector<int> size;
    int n;
    // 当前连通分量数目
    int setCount;

public:
    UnionFind(int _n): n(_n), setCount(_n), parent(_n), size(_n, 1) {
        iota(parent.begin(), parent.end(), 0);
    }

    int findset(int x) {
        return parent[x] == x ? x : parent[x] = findset(parent[x]);
    }

    bool unite(int x, int y) {
        x = findset(x);
        y = findset(y);
        if (x == y) {
            return false;
        }
        if (size[x] < size[y]) {
            swap(x, y);
        }
        parent[y] = x;
        size[x] += size[y];
        --setCount;
        return true;
    }

    bool connected(int x, int y) {
        x = findset(x);
        y = findset(y);
        return x == y;
    }
};

* plantUml
** introduce
看起来 OAuth 2.0 框架 已经越来越广泛地应用于 web (和 移动) 应用。太棒了！
虽然协议本身并不复杂，但有很多的使用场景、流程和实现可供选择。正如生活中的大多数事物一样，魔鬼在于细节之中。
在审查 OAuth 2.0 实现或编写渗透测试报告时我习惯画出 UML 图。这方便让人理解发生了什么事情，并发现潜在的问题。毕竟，一图抵千言。
使用基于 GPL 开源协议 Emacs 编辑器来实现，再加上基于 GPL 开源协议的工具 PlantUML (也可以选择基于 Eclipse Public 协议的 Graphviz) 很容易做到这一点。
Emacs 是世界上最万能的编辑器。在这种场景中，我们用它来编辑文本，并自动将文本转换成图片。PlantUML 是一个允许你用人类可读的文本来写 UML 并完成该转换的工具。Graphviz 是一个可视化的软件，这里我们可以用它来显示图片。
下载 预先编译好了的 PlantUML jar 文件 ，Emacs 还可以选择下载并安装 Graphviz。
安装并启动 Emacs，然后将下面 Lisp 代码（实际上是配置）写入你的启动文件中（~/.emacs.d/init.d），这段代码将会：
配置 org 模式（一种用来组织并编辑文本文件的模式）来使用 PlantUML
将 plantuml 添加到可识别的 “org-babel” 语言中（这让你可以在文本文件中执行源代码）
将 PlantUML 代码标注为安全的，从而允许执行
自动显示生成的结果图片
;; tell org-mode where to find the plantuml JAR file (specify the JAR file)
(setq org-plantuml-jar-path (expand-file-name "~/plantuml.jar"))
;; use plantuml as org-babel language
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
;; helper function
(defun my-org-confirm-babel-evaluate (lang body)
"Do not ask for confirmation to evaluate code for specified languages."
(member lang '("plantuml")))
;; trust certain code as being safe
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
;; automatically show the resulting image
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
如果你还没有启动文件，那么将该代码加入到 ~/.emacs.d/init.el 文件中然后重启 Emacs。
** 操作
*** 生成大图片
java -DPLANTUML_LIMIT_SIZE=25000 -jar ~/Downloads/plantuml.jar ./pytree_txt.txt
*** emacs下生成图片
要测试该配置，可以创建/打开（Control-x Control-f）后缀为 .org 的文件，例如 test.org。这会让 Emacs 切换到 org 模式并识别 “org-babel” 语法。
输入下面代码，然后在代码中输入 Control-c Control-c
** 中文乱码问题
在第一行加上" :cmdline -charset utf-8"

* git
git submodule update --init --recursive
git submodule update --remote
git checkout --track origin/***

git commit -m 提交之后，发现-m的说明文字写的有问题，想要重新写一次，也就是想撤销上次的提交动作，重新提交一次
这个时候可以用命令 git commit --amend;
git commit --amend 重新提交是在日志看不到操作记录的

** gerrit push远端的规则
git push origin ***:refs/for/***

* org-mode
** shorcut
|----------------+----------------------------------|
| shortcut       | 描述                             |
|----------------+----------------------------------|
| tab            | 自述循环                         |
| s-tab或c-u tab | 全局循环                         |
| M-RET          | 插入一个同级标题                 |
| c-c c-c        | 在定义和引用直接跳转             |
|----------------+----------------------------------|
| c-c -          | 添加水平线                       |
| c-c ^          | 将表排序                         |
|----------------+----------------------------------|
| c-c l          | 在当前位置保存一个链接           |
| c-c c-l        | 插入一个链接，修改链接内容       |
| c-c c-o        | 打开链接                         |
| c-c &          | 跳回记录地址                     |
| c-c %          | 记录一个地址                     |
| c-c c-t        | 状态切换todo                     |
| m-down&up      | 上下移动                         |
|----------------+----------------------------------|
| c-c ,          | 设置优先级                       |
| c-c .          | 询问日期，设置时间戳             |
| c-c c-d        | "deadline"时间戳                 |
| c-c c-s        | "scheduled"时间戳                |
| c-c c-x c-i    | 开始目前条目的计时(clock-in)     |
| c-c c-x c-o    | 停止计时(clock-out)              |
| c-c c-x c-e    | 更新进度                         |
| c-c c-x c-x    | 取消当前计时                     |
| c-c c-x c-j    | 跳转到包含当前正在运行的任务条目 |
| c-c c-x c-r    | 计时报告的动态块                 |
|----------------+----------------------------------|
| c-c [          | 将当前文件加入到议程文件列表中   |
| c-c ]          | 将当前文件从议程文件列表中删除   |
| c-,            | 遍历议程文件列表                 |
|----------------+----------------------------------|
** command
 | command       | description        |
 | org-clock-in  | 开始单签条目的计时 |
 | org-clock-out | 停止计时      |
** text
*** 纯文本的方法
: 加上冒号，可以输入纯文本
#+BEGIN_EXAMPLE
这样也可以输入纯文本
#+END_EXAMPLE
*** 源码
#+begin_src c++
  void main(){
      return 0;
  }
#+end_src
*** 包含文件
#+INCLUDE: "~/.emacs.d/lisp/" src emacs-lisp
*** 任务细分
#+begin_example
很多时候将一个大的任务分成几个的易于完成的小任务是明智的。你可以通过在TODO项目下新建一个大纲树，并在子树上标记子任务来实现这个功能。为了能对已经完成的任务有个大致的了解，你可以在标题的任何地方插入‘[/]’或者‘[%]’。当每个子任务的状态变化时，或者当你在标记上按 C-c C-c时，这些标记状态也会随之更新。
#+end_example
* emacs-lsp
* emacs src
* chrome src
* LaTex?
* debug
** realgud
u |Up stack(move to older stack frame)
d |down stack(move to younger stack frame)
n |Next(aka "step over", "step through")
s |Step(aka "step into")
f |Finish(aka "step out", "return")
c |continue(run to next break point)
F |window-backtrace
** lldb
break (b) - 设置断点，也就是程序暂停的地方
run (r) - 启动目标程序，如果遇到断点则暂停
step (s) - 进入下一条指令中的函数内部
backtrace (bt) - 显示当前的有效函数
frame (f) - 默认显示当前栈的内容，可以通过 `frame arg` 进入特定的 frame（用作输出本地变量）
next (n) - 运行当前箭头指向行
continue (c) - 继续运行程序直到遇到断点
file - specify programe to debug
** gdb
** pdb
* gtest
** filter
#+begin_src c++
TEST(case1, functionA_test){}
TEST(case2, functionA_test){}
TEST(case2, functionB_test){}
TEST(case3, functionA_test){}
#+end_src
比如我们现在想要只跑case2这几个测试，那么一个命令行参数就可以搞定：
--gtest_filter=case2.*
* lldb & gdb
** expression 可以改变变量的值
'print' is an obbreviation for 'expression --'
* linux command
** find
查找目录(-type d)：find /path/to/search -type d -name "name-of-dir"
搜索大小在100MB到1GB之间的文件：find /path/to/search -size +100M -size -1G
从文件列表中查找(grep的-f选项表示“file”):find /path/to/search | grep -f filelist.txt
不在列表中查找(grep的-v选项表示“逆向匹配”):find /path/to/search | grep -v filelist.txt
递归查找：find . -maxdepth 0 -name "myfile.txt"
删除目录（和子目录）中的所有空文件：find /path/to/search -type f -empty -delete
stderr->stdout,过滤错误：find / -name "myfile.txt" 2>%1 | grep -v "Permission denied"
查找最近X天内的修改文件：find /path/to/search -type f -mtime -30 -exec ls -l {} \;
*** 参数列表
-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件
-amin n : 在过去 n 分钟内被读取过
-anewer file : 比文件 file 更晚被读取过的文件
-atime n : 在过去n天内被读取过的文件
-cmin n : 在过去 n 分钟内被修改过
-cnewer file :比文件 file 更新的文件
-ctime n : 在过去n天内被修改过的文件
-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name
-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写
-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写
-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。
-type c : 文件类型是 c 的文件。
d: 目录
c: 字型装置文件
b: 区块装置文件
p: 具名贮列
f: 一般文件
l: 符号连结
s: socket
-pid n : process id 是 n 的文件
** locate
locate命令通过搜索包含系统上所有文件名的数据库来工作
可以通过运行updatedb命令手动更新此文件数据库
当您需要在整个硬盘驱动器中搜索文件时，locate命令特别有用，因为find命令自然需要更长的时间，因为它必须实时遍历每个目录。
如果搜索一个特定目录（已知其中不包含大量子目录），则最好坚持使用find命令。
** grep
(1)grep 'test' d*　　#显示所有以d开头的文件中包含 test的行
(2)grep ‘test' aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行
(3)grep ‘[a-z]\{5\}' aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行
(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行
(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行
(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配'magic'，而不是'magical')，
*** 参数列表
-a 或 --text : 不要忽略二进制的数据。
-A<显示行数> 或 --after-context=<显示行数> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。
-b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。
-B<显示行数> 或 --before-context=<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前的内容。
-c 或 --count : 计算符合样式的列数。
-C<显示行数> 或 --context=<显示行数>或-<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。
-d <动作> 或 --directories=<动作> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。
-e<范本样式> 或 --regexp=<范本样式> : 指定字符串做为查找文件内容的样式。
-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。
-f<规则文件> 或 --file=<规则文件> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。
-F 或 --fixed-regexp : 将样式视为固定字符串的列表。
-G 或 --basic-regexp : 将样式视为普通的表示法来使用。
-h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。
-H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。
-i 或 --ignore-case : 忽略字符大小写的差别。
-l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。
-L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。
-n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。
-o 或 --only-matching : 只显示匹配PATTERN 部分。
-q 或 --quiet或--silent : 不显示任何信息。
-r 或 --recursive : 此参数的效果和指定"-d recurse"参数相同。
-s 或 --no-messages : 不显示错误信息。
-v 或 --invert-match : 显示不包含匹配文本的所有行。
-V 或 --version : 显示版本信息。
-w 或 --word-regexp : 只显示全字符合的列。
-x --line-regexp : 只显示全列符合的列。
-y : 此参数的效果和指定"-i"参数相同。
* vs 项目属性继承
* 没看懂的程序
** 给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。
输入：nums = [1,2,2]
输出：[[]][[[],[1],[1,2],[1,2,2],[2],[2,2]]]]
class Solution {
public:
    vector<int> t;
    vector<vector<int>> ans;
    vector<vector<int>> subsetsWithDup(vector<int> &nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int mask = 0; mask < (1 << n); ++mask) {
            t.clear();
            bool flag = true;
            for (int i = 0; i < n; ++i) {
                if (mask & (1 << i)) {
                    if (i > 0 && (mask >> (i - 1) & 1) == 0 && nums[i] == nums[i - 1]) {
                        flag = false;
                        break;
                    }
                    t.push_back(nums[i]);
                }
            }
            if (flag) {
                ans.push_back(t);
            }
        }
        return ans;
    }
};
** n是否是2的幂
#+begin_src c
  bool cal(int n){
    // return n>0 && (n & n-1) == 0;
      return n && (n & -n) == n;
  }
#+end_src
** 使所有区间的异或结果为零
[[https://leetcode-cn.com/problems/make-the-xor-of-all-segments-equal-to-zero/solution/shi-suo-you-qu-jian-de-yi-huo-jie-guo-we-uds2/][力扣1787]]
** 两链表相较
#+begin_src c++
  ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
      ListNode* a = headA;
      ListNode* b = headB;
      while(a!=b){
          a = a != nullptr ? a->next : headB;
          b = b != nullptr ? b->next : headA;
      }
      return a;
  }
#+end_src
* xcode
man xcodebuild
man xcrun

* compile error
** llvm
export LLVM_DIR=/usr/local/Cellar/llvm/4.0.1/lib/cmake/llvm
